
<form id="form" class="w-[95%] max-w-md p-2 rounded-md flex flex-col gap-4 border border-gray-300 md:w-[70%] lg:w-[50%]">
  <div class="flex flex-col gap-2">
    
    <div class="flex flex-col md:flex-row gap-4 w-full">
      <div class="flex-grow">
        <label for="guest-email" class="font-medium">Emails de los invitados</label>
        <textarea 
          name="guest-email" 
          id="guest-email" 
          class="w-full p-2 text-base bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-pink-500 focus:border-pink-500" 
          placeholder="Separa los correos por comas, espacios o saltos de línea..."
          rows="4"
        ></textarea>
        <span class="absolute right-2.5 hidden text-xl"></span>
      </div>

      <div> 
        <label for="event-id" class="block text-sm font-medium text-gray-700">Seleccionar evento</label>
        <select 
          name="events_id" 
          id="event-id"
          class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-pink-500 focus:border-pink-500"
          required
        >
          <option value="" disabled selected>Elige un evento...</option>
        </select>
      </div>
    </div>
    
  </div>
  <div class="flex flex-col gap-2">
   <label for="indications" class="block text-sm font-medium text-gray-700">Indicaciones (Opcional)</label>
    <textarea
     name="indications"
     id="indications"
     placeholder="Ej: Traer laptop, código de vestimenta casual..."
     rows="3"
     class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-pink-500 focus:border-pink-500"
     ></textarea>
  </div>
  <button id="form-btn" disabled  class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-pink-700 hover:bg-pink-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-800 transition-colors duration-200">Agregar a la lista</button>
</form>

<script>
  // @ts-nocheck
  import { createNotification } from "../../features/notifications/notificiation";
  import ky from 'ky';
  import AuthModule from "../../features/auth/auth.module";
  import guestModule from "./guest.module";
  import { BACK_ENDPOINT } from "../../config/endpoints";

  const user = await AuthModule.getLoggedUser();
  const userId = user.id;
  const eventsApiUrl = `${BACK_ENDPOINT}/api/events/events/${userId}`;

  const indicationsInput = document.querySelector('#indications');
  const form = document.querySelector('#form');
  const emailInput = document.querySelector('#guest-email'); // Ahora es un textarea
  const eventSelect = document.querySelector('#event-id');
  const formBtn = document.querySelector('#form-btn');

  const emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  const INDICATIONS_REGEX = /^[\w\s.,-ñÑáéíóúÁÉÍÓÚ¡!¿?()"'\/@#%\n\r]*$/;

  const validationState = {
    isEmailValid: false,
    isIndicationsValid: true, // Opcional, así que por defecto es válido
  };

  function updateInputValidationUI(inputElement, isValid) {
    if (isValid) {
      inputElement.classList.remove('border-red-500');
      inputElement.classList.add('border-green-500');
    } else {
      inputElement.classList.remove('border-green-500');
      inputElement.classList.add('border-red-500');
    }
    if (inputElement.value === '') {
      inputElement.classList.remove('border-red-500', 'border-green-500');
    }
  };

  function validateForm() {
    // El formulario es válido si hay al menos un correo válido.
    const emails = emailInput.value.split(/,|\s+|\n+/).filter(email => emailRegex.test(email.trim()));
    validationState.isEmailValid = emails.length > 0;
    formBtn.disabled = !validationState.isEmailValid;
  };
  
  // Eventos para validar en tiempo real
  emailInput.addEventListener('input', () => {
    const emails = emailInput.value.split(/,|\s+|\n+/).filter(email => email.trim() !== '');
    const allEmailsAreValid = emails.every(email => emailRegex.test(email.trim()));
    updateInputValidationUI(emailInput, allEmailsAreValid);
    validateForm();
  });

  indicationsInput.addEventListener('input', () => {
    const isValid = INDICATIONS_REGEX.test(indicationsInput.value);
    validationState.isIndicationsValid = isValid;
    updateInputValidationUI(indicationsInput, isValid);
  });

  // Cargar eventos en el select
  const events = await ky.get(eventsApiUrl, { credentials: 'include' }).json();
  events.forEach(event => {
    const option = document.createElement('option');
    option.value = event.id;
    option.textContent = event.name;
    eventSelect.appendChild(option);
  });

  // --- LÓGICA DE ENVÍO PRINCIPAL (ACTUALIZADA) ---
  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // 1. Obtener y limpiar la lista de correos
    const emailsText = emailInput.value.trim();
    const emailsArray = emailsText.split(/,|\s+|\n+/)
      .map(email => email.trim())
      .filter(email => emailRegex.test(email)); // Filtrar solo los correos válidos

    if (emailsArray.length === 0) {
      createNotification({
        type: 'error',
        description: 'Por favor, ingresa al menos un correo electrónico válido.'
      });
      return;
    }

  
    for (const email of emailsArray) {
      
      const guestName = email.split('@')[0];

      const guestToSend = {
        guest_name: guestName,
        events_id: eventSelect.value,
        guest_email: email,
        indications: indicationsInput.value || ''
      };
      
      
      await guestModule.addGuestTolist(guestToSend);
    }
    
    createNotification({
        type: 'success',
        title: `${emailsArray.length} invitado(s) agregado(s) a la lista`
    });

    
    emailInput.value = '';
    indicationsInput.value = '';
   
    updateInputValidationUI(emailInput, false);
    validationState.isEmailValid = false;
    validateForm();
  });
</script>